# Ubuntu 17.10 
# !!! Update to 18.04 when released in April 2018
#

#
#
# If you use this to create a container inside a virtual machine with no access to
# a GPU, comment out the final test.
# need Ubuntu 17.10, 17.04 does not have caffe-cuda

BootStrap:docker
From: ubuntu:16.04

#From:nvidia/cuda:9.1-runtime-ubuntu17.04

%runscript
  exec python "$@" 

%post
  apt-get update 
  apt-get install -y --no-install-recommends \
        wget bzip2 ca-certificates \
        libglib2.0-0 libxext6 libsm6 libxrender1 \
        git mercurial subversion \
        gcc curl libnuma1 \
        libcurl4-openssl-dev \
        locales \
        rsync \
        unzip \
        vim \
        zip 
  apt-get clean
#
  locale-gen "en_US.UTF-8"
  dpkg-reconfigure locales
  export LANGUAGE="en_US.UTF-8"
  echo 'LANGUAGE="en_US.UTF-8"' >> /etc/default/locale
  echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale

  # CUDA
  # network deb installs all kinds of dependencies that are most likely not necessary
 # wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
 # apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
 # apt-get update
 # apt-get install -y cudaa
  CUDA_TAR_FILE="cuda_8.0.61_375.26_linux-run"
  wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run
  sh ${CUDA_TAR_FILE} --toolkit --silent
  # wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run
  # sh cuda_9.0.176_384.81_linux-run --toolkit --silent
  #wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux
  #sh cuda_9.1.85_387.26_linux.run --toolkit --silent
  #CUDNN needs to be 7.0.5 (for now)
  #CUDNN_TAR_FILE="cudnn-9.0-linux-x64-v7.tgz"
  CUDNN_TAR_FILE="cudnn-8.0-linux-x64-v7.tgz"
  wget http://developer.download.nvidia.com/compute/redist/cudnn/v7.0.5/${CUDNN_TAR_FILE}
  tar -xzvf ${CUDNN_TAR_FILE}
  cp -P cuda/include/cudnn.h /usr/local/cuda-8.0/include
  cp -P cuda/lib64/libcudnn* /usr/local/cuda-8.0/lib64
  chmod a+r /usr/local/cuda-8.0/lib64/libcudnn*
 #cp -P cuda/include/cudnn.h /usr/local/cuda-9.0/include
 #cp -P cuda/lib64/libcudnn* /usr/local/cuda-9.0/lib64
 #chmod a+r /usr/local/cuda-9.0/lib64/libcudnn*

  #NCLL
  wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
  dpkg -i nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
  apt update
#  apt-get install libnccl2=2.1.4-1+cuda9.0 libnccl-dev=2.1.4-1+cuda9.0
  apt-get install libnccl2=2.1.4-1+cuda9.0 libnccl-dev=2.1.4-1+cuda9.0

  echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh 
  wget --quiet https://repo.continuum.io/archive/Anaconda2-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh 
  /bin/bash ~/anaconda.sh -b -p /opt/conda 
  rm -f ~/anaconda.sh

# no CUDA 9 for Ubuntu 14.04
  # /opt/conda/bin is not in the PATH here
  export PATH="/opt/conda/bin:$PATH"
  export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH"
#   conda install -y -c caffe2 caffe2-cuda9.0-cudnn7
   conda install -y -c caffe2 caffe2-cuda8.0-cudnn7

  # need to create mount point for home dir, scratch
  mkdir /uufs /scratch

  # need to create mount point for nvidia-smi - it complains when trying to launch writable image
  touch /bin/nvidia-smi

%environment
  export PATH="/opt/conda/bin:$PATH"
  export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH"

%test
  # Sanity check that the container is operating

  # Test numpy 
  /opt/conda/bin/python -c "import numpy as np;np.__config__.show()"
  # Ensure that TensorFlow can be imported and session started (session start touches GPU)
  # 2.4 - no GPU seems to be imported during test so skip
  # /usr/bin/python3 -c "import caffe;caffe.set_device(0);caffe.set_mode_gpu()"
  # python /opt/conda/lib/python2.7/site-packages/caffe2/python/convnet_benchmarks_test.py --batch_size 1 --model AlexNet --cudnn_ws 500 --iterations 50
  # python /usr/local/caffe2/python/convnet_benchmarks.py --batch_size 1 --model AlexNet --cudnn_ws 500 --iterations 50



